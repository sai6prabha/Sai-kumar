# what is Git Hub 
# Create and Clone The Repository
# How to create a Branch 
# How to Commit the  changes
# Create pull Request and merge
# push code into Git Repository
# Change default Branch 
# Delete Repository
# Create Organization Repository


# what is Git Hub 

-> It is a Developer Community
* Git Hub is an Hosting Service Platform
	Hosting Service-There we can able to Store Multiple Files 
-> On Git We Can Able to store any Type of Files By Creating a    Repository
-> Git Hub Is an encourages Teams to work together to build and edit    their site content.

"The Team Will Collaborate and Foke in real time github repository"

GitHub is a web-based interface that uses Git, the open source version control software that lets multiple people make separate changes to web pages at the same time. As Carpenter notes, because it allows for real-time collaboration, GitHub encourages teams to work together to build and edit their site content


GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. This tutorial teaches you GitHub essentials like repositories, branches, commits, and pull requests. ... Create and use a repository. Start and manage a new branch.


At a high level, GitHub is a website and cloud-based service that helps developers store and manage their code, as well as track and control changes to their code. To understand exactly what GitHub is, you need to know two connected principles:

.Version control
.Git



.Version control :-

Version control helps developers track and manage changes to a software project’s code. As a software project grows, version control becomes essential. Take WordPress…

At this point, WordPress is a pretty big project. If a core developer wanted to work on one specific part of the WordPress codebase, it wouldn’t be safe or efficient to have them directly edit the “official” source code.

Instead, version control lets developers safely work through branching and merging.

With branching, a developer duplicates part of the source code (called the repository). The developer can then safely make changes to that part of the code without affecting the rest of the project.

Then, once the developer gets his or her part of the code working properly, he or she can merge that code back into the main source code to make it official.

.Git

Git is a specific open-source version control system created by Linus Torvalds in 2005.

Specifically, Git is a distributed version control system, which means that the entire codebase and history is available on every developer’s computer, which allows for easy branching and merging.

According to a Stack Overflow developer survey, over 87% of developers use Git.

GitHub is a for-profit company that offers a cloud-based Git repository hosting service. Essentially, it makes it a lot easier for individuals and teams to use Git for version control and collaboration.

GitHub’s interface is user-friendly enough so even novice coders can take advantage of Git. Without GitHub, using Git generally requires a bit more technical savvy and use of the command line.

GitHub is so user-friendly, though, that some people even use GitHub to manage other types of projects – like writing books.

Additionally, anyone can sign up and host a public code repository for free, which makes GitHub especially popular with open-source projects.

As a company, GitHub makes money by selling hosted private code repositories, as well as other business-focused plans that make it easier for organizations to manage team members and security. We utilize Github extensively at Kinsta to manage and develop internal projects.




git init	- Initialize a local Git repository

Basic Snapshotting :-

Command					|	Description

git status				-	Check status
git add [file-name.txt]			-	Add a file to the staging area
git add -A				-	Add all new and changed files to the staging area
git commit -m "[commit message]"	-	Commit changes
git rm -r [file-name.txt]		-	Remove a file (or folder)


Branching & Merging "-

Command					|		Description

git branch				-	List branches (the asterisk denotes the current branch)
git branch -a				-	List all branches (local and remote)
git branch [branch name]		-	Create a new branch
git branch -d [branch name]		-	Delete a branch
git push origin --delete [branch name]	-	Delete a remote branch
git checkout -b [branch name]		-	Create a new branch and switch to it
git checkout -b [branch name]
 origin/[branch name]			-	Clone a remote branch and switch to it
git branch -m [old branch name]
 [new branch name]			-	Rename a local branch
git checkout [branch -name]		-	Switch to a branch
git checkout				-	Switch to the branch last checked out
git checkout -- [file-name.txt]		-	Discard changes to a file
git merge [branch name]			-	Merge a branch into the active branch
git merge [source branch]
 [target branch]			-	Merge a branch into a target branch
git stash				-	Stash changes in a dirty working directory
git stash clear				-	Remove all stashed entries


Sharing & Updating Projects :-

Command					 |		Description

git push origin [branch name]				Push a branch to your remote repository
git push -u origin [branch name]			Push changes to remote repository (and remember the branch)
git push						Push changes to remote repository (remembered branch)
git push origin --delete [branch name]			Delete a remote branch
git pull						Update local repository to the newest commit
git pull origin [branch name]				Pull changes from remote repository
git remote add origin 
ssh://git@github.com/[username]/
[repository-name].git					Add a remote repository
git remote set-url origin 
ssh://git@github.com/[username]/
[repository-name].git					Set a repository's origin branch to SSH

Inspection & Comparison :-

Command					 |		Description

git log							View changes
git log --summary					View changes (detailed)
git log --oneline					View changes (briefly)
git diff [source branch] [target branch]		Preview changes before merging




Developers can review project history to find out:

Which changes were made?
Who made the changes?
When were the changes made?
Why were changes needed?



